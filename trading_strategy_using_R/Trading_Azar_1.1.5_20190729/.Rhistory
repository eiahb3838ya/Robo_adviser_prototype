sharpe
plot_ly(ef, type = 'scatter', x = ~sigma.P, y = ~mu.P, mode = 'lines') %>%
layout(title = paste0("Strategy Return"),
xaxis = list(title = 'Sigma',range = c(0 , max(sd.R) * 1.1)),
yaxis = list(title = 'Return',range = c(min(mean.R) * 0.5, max(mean.R) * 1.1)))
mean.R
Portfolio_EFrontier <- get_EfficientFrontier(Portfolio_All$Equity_All)
Portfolio_EFrontier
mean.R
Portfolio_EFrontier$Mu
rep(1, NCOL(mean.R))
Amat
mean.R
mean.R <- colMeans(Portfolio_All$Equity_All[,-c(1,2)])
mean.R_round <- round(mean.R, digits = 5)
cov.R <- cov(Portfolio_All$Equity_All[,-c(1,2)])
Amat <- cbind(rep(1, NCOL(mean.R)), mean.R)  ## set the equality constraints matrix
mu.P <- seq(min(mean.R_round), max(mean.R_round), length = 1000)  ## set of 300 possible target portfolio returns
sigma.P <- mu.P  ## set up storage for std dev's of portfolio returns
for (i in 1:length(mu.P)) {
# i <- 1
bvec = c(1, mu.P[i])  ## constraint vector
result = solve.QP(Dmat = as.matrix(cov.R),
dvec = rep(0, length(mean.R)),
Amat = Amat,
bvec = bvec, meq = 2)
sigma.P[i] = sqrt(result$value)
}
ef <- data.table(sigma.P, mu.P)
plot_ly(ef, type = 'scatter', x = ~sigma.P, y = ~mu.P, mode = 'lines') %>%
layout(title = paste0("Strategy Return"),
xaxis = list(title = 'Sigma',range = c(0 , max(sd.R) * 1.1)),
yaxis = list(title = 'Return',range = c(min(mean.R) * 0.5, max(mean.R) * 1.1)))
plot_ly(x = Portfolio_EFrontier$targetRisk$Cov, y = Portfolio_EFrontier$targetReturn$mu, mode = "lines", name = "Efficient Frontier", type = "scatter") %>%
add_trace(x = Portfolio_EFrontier$Sigma$MACD, y = Portfolio_EFrontier$Mu$MACD, mode = "markers", name = "MACD", type = "scatter",
hoverinfo = 'text', text = ~paste('MACD : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$MACD, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$MACD)) %>%
add_trace(x = Portfolio_EFrontier$Sigma$RSI, y = Portfolio_EFrontier$Mu$RSI, mode = "markers", name = "RSI", type = "scatter",
hoverinfo = 'text', text = ~paste('RSI : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$RSI, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$RSI)) %>%
add_trace(x = Portfolio_EFrontier$Sigma$MA, y = Portfolio_EFrontier$Mu$MA, mode = "markers", name = "MA", type = "scatter",
hoverinfo = 'text', text = ~paste('MA : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$MA, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$MA)) %>%
add_trace( x = Portfolio_EFrontier$Sigma$BB, y = Portfolio_EFrontier$Mu$BB, mode = "markers", name = "BB", type = "scatter",
hoverinfo = 'text', text = ~paste('BB : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$BB, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$BB)) %>%
add_trace(x = Portfolio_EFrontier$Sigma$Dist, y = Portfolio_EFrontier$Mu$Dist, mode = "markers", name = "Dist", type = "scatter",
hoverinfo = 'text', text = ~paste('Dist : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$Dist, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$Dist)) %>%
add_trace(x = Portfolio_EFrontier$Risk[[2]], y = Portfolio_EFrontier$Return[[2]], mode = "markers", name = "MinSigma", type = "scatter",
hoverinfo = 'text', text = ~paste('Min Sigma : ', '<br /> Mean: ', Portfolio_EFrontier$Return[[2]], '<br /> Sigma: ', Portfolio_EFrontier$Risk[[2]])) %>%
add_trace(x = Portfolio_EFrontier$tgRisk, y = Portfolio_EFrontier$tgReturn, mode = "markers", name = "Portfolio", type = "scatter",
hoverinfo = 'text', text = ~paste('Portfolio : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$Dist, '<br /> Sigma: ', Portfolio_EFrontier$tgRisk)) %>%
layout(title = "Efficient Frontier", xaxis = list(title = "Sigma"), yaxis = list(title = "Mean"))
Portfolio_EFrontier$Mu
mean.R_round
mean.R
mu.P <- seq(min(mean.R), max(mean.R), length = 1000)  ## set of 300 possible target portfolio returns
sigma.P <- mu.P  ## set up storage for std dev's of portfolio returns
for (i in 1:length(mu.P)) {
# i <- 1
bvec = c(1, mu.P[i])  ## constraint vector
result = solve.QP(Dmat = as.matrix(cov.R),
dvec = rep(0, length(mean.R)),
Amat = Amat,
bvec = bvec, meq = 2)
sigma.P[i] = sqrt(result$value)
}
ef <- data.table(sigma.P, mu.P)
plot_ly(ef, type = 'scatter', x = ~sigma.P, y = ~mu.P, mode = 'lines') %>%
layout(title = paste0("Strategy Return"),
xaxis = list(title = 'Sigma',range = c(0 , max(sd.R) * 1.1)),
yaxis = list(title = 'Return',range = c(min(mean.R) * 0.5, max(mean.R) * 1.1)))
mu.P
Portfolio_EFrontier$Mu
View(ef)
mu.P <- seq(min(mean.R), max(mean.R), length = 10000)  ## set of 300 possible target portfolio returns
sigma.P <- mu.P  ## set up storage for std dev's of portfolio returns
for (i in 1:length(mu.P)) {
# i <- 1
bvec = c(1, mu.P[i])  ## constraint vector
result = solve.QP(Dmat = as.matrix(cov.R),
dvec = rep(0, length(mean.R)),
Amat = Amat,
bvec = bvec, meq = 2)
sigma.P[i] = sqrt(result$value)
}
ef <- data.table(sigma.P, mu.P)
plot_ly(ef, type = 'scatter', x = ~sigma.P, y = ~mu.P, mode = 'lines') %>%
layout(title = paste0("Strategy Return"),
xaxis = list(title = 'Sigma',range = c(0 , max(sd.R) * 1.1)),
yaxis = list(title = 'Return',range = c(min(mean.R) * 0.5, max(mean.R) * 1.1)))
mu.P <- seq(min(mean.R), max(mean.R), length = 1000000)  ## set of 300 possible target portfolio returns
sigma.P <- mu.P  ## set up storage for std dev's of portfolio returns
for (i in 1:length(mu.P)) {
# i <- 1
bvec = c(1, mu.P[i])  ## constraint vector
result = solve.QP(Dmat = as.matrix(cov.R),
dvec = rep(0, length(mean.R)),
Amat = Amat,
bvec = bvec, meq = 2)
sigma.P[i] = sqrt(result$value)
}
# options(scipen = 999)
ef <- data.table(sigma.P, mu.P)
plot_ly(ef, type = 'scatter', x = ~sigma.P, y = ~mu.P, mode = 'lines') %>%
layout(title = paste0("Strategy Return"),
xaxis = list(title = 'Sigma',range = c(0 , max(sd.R) * 1.1)),
yaxis = list(title = 'Return',range = c(min(mean.R) * 0.5, max(mean.R) * 1.1)))
mu.P <- seq(min(mean.R), max(mean.R), length = 1000)  ## set of 300 possible target portfolio returns
sigma.P <- mu.P  ## set up storage for std dev's of portfolio returns
for (i in 1:length(mu.P)) {
# i <- 1
bvec = c(1, mu.P[i])  ## constraint vector
result = solve.QP(Dmat = as.matrix(cov.R),
dvec = rep(0, length(mean.R)),
Amat = Amat,
bvec = bvec, meq = 2)
sigma.P[i] = sqrt(result$value)
}
# options(scipen = 999)
ef <- data.table(sigma.P, mu.P)
plot_ly(ef, type = 'scatter', x = ~sigma.P, y = ~mu.P, mode = 'lines') %>%
layout(title = paste0("Strategy Return"))
##  plot
plot(sigma.P, mu.P, type = "l", xlim = c(min(sd.R) * 0.5 , max(sd.R) * 1.1),
ylim = c(min(mean.R) * 0.5, max(mean.R) * 1.1), lty = 3, lwd = 3)
Portfolio_EFrontier$Return
Portfolio_EFrontier$tgReturn
Portfolio_EFrontier$tgRisk
plot_ly(x = Portfolio_EFrontier$targetRisk$Cov, y = Portfolio_EFrontier$targetReturn$mu, mode = "lines", name = "Efficient Frontier", type = "scatter") %>%
add_trace(x = Portfolio_EFrontier$Sigma$MACD, y = Portfolio_EFrontier$Mu$MACD, mode = "markers", name = "MACD", type = "scatter",
hoverinfo = 'text', text = ~paste('MACD : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$MACD, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$MACD)) %>%
add_trace(x = Portfolio_EFrontier$Sigma$RSI, y = Portfolio_EFrontier$Mu$RSI, mode = "markers", name = "RSI", type = "scatter",
hoverinfo = 'text', text = ~paste('RSI : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$RSI, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$RSI)) %>%
add_trace(x = Portfolio_EFrontier$Sigma$MA, y = Portfolio_EFrontier$Mu$MA, mode = "markers", name = "MA", type = "scatter",
hoverinfo = 'text', text = ~paste('MA : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$MA, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$MA)) %>%
add_trace( x = Portfolio_EFrontier$Sigma$BB, y = Portfolio_EFrontier$Mu$BB, mode = "markers", name = "BB", type = "scatter",
hoverinfo = 'text', text = ~paste('BB : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$BB, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$BB)) %>%
add_trace(x = Portfolio_EFrontier$Sigma$Dist, y = Portfolio_EFrontier$Mu$Dist, mode = "markers", name = "Dist", type = "scatter",
hoverinfo = 'text', text = ~paste('Dist : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$Dist, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$Dist)) %>%
add_trace(x = Portfolio_EFrontier$Risk[[2]], y = Portfolio_EFrontier$Return[[2]], mode = "markers", name = "MinSigma", type = "scatter",
hoverinfo = 'text', text = ~paste('Min Sigma : ', '<br /> Mean: ', Portfolio_EFrontier$Return[[2]], '<br /> Sigma: ', Portfolio_EFrontier$Risk[[2]])) %>%
add_trace(x = Portfolio_EFrontier$tgRisk, y = Portfolio_EFrontier$tgReturn, mode = "markers", name = "Portfolio", type = "scatter",
hoverinfo = 'text', text = ~paste('Portfolio : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$Dist, '<br /> Sigma: ', Portfolio_EFrontier$tgRisk)) %>%
layout(title = "Efficient Frontier", xaxis = list(title = "Sigma"), yaxis = list(title = "Mean"))
##### ........... =====
##### Library =====
lib <- c("PerformanceAnalytics","quantmod","timeSeries","fUnitRoots",
"fPortfolio","CVXR","data.table","plotly")
lapply(lib, library, character.only = TRUE)
##### ........... =====
##### Input =====
input <- list()
input$SelectCol <- "Close"
input$listID <- "2330"
# periodn = "Day"
# periodn = "Week"
# periodn = "Month"
# periodn = "Quarter"
# periodn = "Year"
input$period <- "Month"
input$StartDate <-  "2007-01-02"
input$EndDate <-  "2019-06-28"
input$SelectCol <- "Close"
# input$InitialCapital <- 200000 # 20萬
##### ........... =====
##### Source =====
# pathis <- "D:/Azar/2019Main/XQC_Trading/Trading_Azar_Test_20190715/"
# files <- list.files(path = paste0(pathis,"Function/"),pattern = "\\.R")
files <- list.files(path = "Function/",pattern = "\\.R")
lapply(files, function(idx){
source(paste0("Function/", idx))
})
##### ........... =====
##### DataTable =====
RDS <- "SQLDB_TW_20190711.RDS"
readDataFrame <- readRDS(file = paste0("Data/",RDS))
##### ........... =====
##### Data Clean  =====
##### getDT_FromSQL =====
DataTable <- getDT_FromSQL(readDataFrame)
##### getCol_DT =====
SelectCol_DT <- getCol_DT(DataTable, input$SelectCol)
##### getCode_DT =====
SelectCode_DT <- getCode_DT(SelectCol_DT, input$listID)
##### getPeriod_DT =====
Period_DT <- getPeriod_DT(SelectCode_DT)
Win_DT <- getWin_DT(SelectCode_DT, input$StartDate, input$EndDate)
##### getSelect_DT =====
Select_DT <- getSelect_DT(Win_DT, input$listID, input$StartDate, input$EndDate)
##### ........... =====
##### Ret_DT =====
Ret_DT <- getRet_DT(Select_DT)
##### ........... =====
##### Info =====
CumRet_DT <- getCumRet_DT(Ret_DT)
## CumRet_Plotly
CumRet_Plotly <- getPloty(CumRet_DT)
plot_ly(CumRet_Plotly, x = ~index, y = ~CumRet,
type = 'scatter', mode = 'lines'
,hoverinfo = 'text',
text = ~paste('Equity : ', CumRet,
'<br /> Date: ', index)
) %>%
layout(title = paste0(input$listID,"Equity Curve"),
xaxis = list(title = ''),
yaxis = list(title = 'Equity')
)
##### ........... =====
##### Library =====
lib <- c("PerformanceAnalytics","quantmod","timeSeries","fUnitRoots",
"fPortfolio","CVXR","data.table","plotly")
lapply(lib, library, character.only = TRUE)
##### ........... =====
##### Input =====
input <- list()
input$SelectCol <- "Close"
input$listID <- "2330"
# periodn = "Day"
# periodn = "Week"
# periodn = "Month"
# periodn = "Quarter"
# periodn = "Year"
input$period <- "Month"
input$StartDate <-  "2007-01-02"
input$EndDate <-  "2019-06-28"
input$SelectCol <- "Close"
# input$InitialCapital <- 200000 # 20萬
##### ........... =====
##### Source =====
# pathis <- "D:/Azar/2019Main/XQC_Trading/Trading_Azar_Test_20190715/"
# files <- list.files(path = paste0(pathis,"Function/"),pattern = "\\.R")
files <- list.files(path = "Function/",pattern = "\\.R")
lapply(files, function(idx){
source(paste0("Function/", idx))
})
##### ........... =====
##### DataTable =====
RDS <- "SQLDB_TW_20190711.RDS"
readDataFrame <- readRDS(file = paste0("Data/",RDS))
##### ........... =====
##### Data Clean  =====
##### getDT_FromSQL =====
DataTable <- getDT_FromSQL(readDataFrame)
##### getCol_DT =====
SelectCol_DT <- getCol_DT(DataTable, input$SelectCol)
##### getCode_DT =====
SelectCode_DT <- getCode_DT(SelectCol_DT, input$listID)
##### getPeriod_DT =====
Period_DT <- getPeriod_DT(SelectCode_DT)
Win_DT <- getWin_DT(SelectCode_DT, input$StartDate, input$EndDate)
##### getSelect_DT =====
Select_DT <- getSelect_DT(Win_DT, input$listID, input$StartDate, input$EndDate)
##### ........... =====
##### Ret_DT =====
Ret_DT <- getRet_DT(Select_DT)
##### ........... =====
##### Info =====
CumRet_DT <- getCumRet_DT(Ret_DT)
## CumRet_Plotly
CumRet_Plotly <- getPloty(CumRet_DT)
##### ........... =====
##### Portfolio_All =====
##### MACD Strategy =====
# MACD_Fast = 12, MACD_Slow = 26, MACD_Sig = 9
MACD_Signal <- get_MACD_Signal(Select_DT)
Equity_MACD <- getEquity_DT(Ret_DT, MACD_Signal)
JG_Equity_DT_MACD <- get_Equity_All_DT(Select_DT, Ret_DT, MACD_Signal, Equity_MACD)
##### RSI Strategy =====
# nma = 5, maType = "SMA", > RSI_Up = 70 Short, < RSI_Down = 30 Long
RSI_Signal <- get_RSI_Signal(Select_DT)
Equity_RSI <- getEquity_DT(Ret_DT, RSI_Signal)
JG_Equity_DT_RSI <- get_Equity_All_DT(Select_DT, Ret_DT, RSI_Signal, Equity_RSI)
##### MA Strategy =====
# MA_fast = 10, MA_slow = 20
MA_Signal <- get_MA_Signal(Select_DT)
Equity_MA <- getEquity_DT(Ret_DT, MA_Signal)
JG_Equity_DT_MA <- get_Equity_All_DT(Select_DT, Ret_DT, MA_Signal, Equity_MA)
##### BB Strategy =====
# BB_size = 20, BB_k = 1
BB_Signal <- get_BB_Signal(Select_DT)
Equity_BB <- getEquity_DT(Ret_DT, BB_Signal)
JG_Equity_DT_BB <- get_Equity_All_DT(Select_DT, Ret_DT, BB_Signal, Equity_BB)
#### Distance Based Pair Trading Strategy =====
# StockCode = "2330", Dist_size = 20, Dist_k = 1
Dist_Pair <- get_Dist_Pair(Win_DT, StockCode = input$listID)
Dist_Signal <- get_Pair_Signal(Win_DT, Dist_Pair = Dist_Pair, SignalName = "Dist")
Dist_Ret <- get_Pair_Ret(Win_DT, Dist_Pair = Dist_Pair)
Equity_Dist <- getEquity_DT(Dist_Ret, Dist_Signal)
JG_Equity_DT_Dist <- get_Equity_All_DT(Select_DT, Dist_Ret, Dist_Signal, Equity_Dist)
JG_Dist_Report <- data.frame("Dist",Dist_Pair$stock1, Dist_Pair$stock2)
colnames(JG_Dist_Report) <- c("Pair Trading", "Stock X", "Stock Y")
##### ........... =====
##### Equity_All =====
Equity_All <- get_Equity_DT(Ret_DT, Equity_MACD, Equity_RSI, Equity_MA, Equity_BB, Equity_Dist)
# PT_Report <- rbind(JG_Dist_Report, JG_Corr_Report)
PT_Report <- JG_Dist_Report
Portfolio_All <- list(Equity_All = Equity_All, PT_Report = PT_Report )
##### MVaR_CVaR_Markowitz =====
MVaR_CVaR_Markowitz <- get_MVaR_CVaR_Markowitz(Portfolio_All$Equity_All)
Portfolio_EFrontier <- get_EfficientFrontier(Portfolio_All$Equity_All)
Portfolio_EFrontier$tgReturn
Portfolio_EFrontier$Mu
mean.R <- base::colMeans(Portfolio_All$Equity_All[,-c(1,2)])
cov.R <- stats::cov(Portfolio_All$Equity_All[,-c(1,2)])
Amat <- cbind(rep(1, NCOL(mean.R)), mean.R)
mu.P <- seq(min(mean.R), max(mean.R), length = 1000)
RL_Wt_Markowitz <- Fun_Markowitz(mean.R, cov.R, 0.5)
dim(mean.R)
View(mean.R)
class(mean.R)
Wt_Markowitz <- Fun_Markowitz(mean.R, cov.R, 0.5)
Wt_Markowitz
mean.R
Ret_Markowitz <- (mean.R %*% Wt_Markowitz)
Ret_Markowitz
5.302024e-09*0.0004308479 + 7.904795e-09*0.0005397585+1.870820e-09*-0.0004103769+1.000000e+00*0.0008172416+3.781541e-09*0.0005353746
Wt_Markowitz
View(Wt_Markowitz)
mean.R
View(mean.R)
SD_Markowitz <- sqrt(Wt_Markowitz %*% cov.R %*% Wt_Markowitz)
SD_Markowitz
for (i in 1:length(mu.P)) {
# i <- 1
bvec = c(1, mu.P[i])  ## constraint vector
result = solve.QP(Dmat = as.matrix(cov.R),
dvec = rep(0, length(mean.R)),
Amat = Amat,
bvec = bvec, meq = 2)
sigma.P[i] = sqrt(result$value)
}
sigma.P <- ma
sigma.P <- mu.P
for (i in 1:length(mu.P)) {
# i <- 1
bvec = c(1, mu.P[i])  ## constraint vector
result = solve.QP(Dmat = as.matrix(cov.R),
dvec = rep(0, length(mean.R)),
Amat = Amat,
bvec = bvec, meq = 2)
sigma.P[i] = sqrt(result$value)
}
library(quadprog)
for (i in 1:length(mu.P)) {
# i <- 1
bvec = c(1, mu.P[i])  ## constraint vector
result = solve.QP(Dmat = as.matrix(cov.R),
dvec = rep(0, length(mean.R)),
Amat = Amat,
bvec = bvec, meq = 2)
sigma.P[i] = sqrt(result$value)
}
# options(scipen = 999)
ef <- data.table(sigma.P, mu.P)
View(ef)
plot_ly(ef, type = 'scatter', x = ~sigma.P, y = ~mu.P, mode = 'lines') %>%
layout(title = paste0("Strategy Return"),
xaxis = list(title = 'Sigma',range = c(0 , max(sd.R) * 1.1)),
yaxis = list(title = 'Return',range = c(min(mean.R) * 0.5, max(mean.R) * 1.1)))
head(ef)
plot_ly(ef, type = 'scatter', x = ~sigma.P, y = ~mu.P, mode = 'lines') %>%
layout(title = paste0("Strategy Return"),
xaxis = list(title = 'Sigma',range = c(0 , max(sigma.P) * 1.1)),
yaxis = list(title = 'Return',range = c(min(mean.R) * 0.5, max(mean.R) * 1.1)))
Ret_Markowitz <- mean.R %*% Wt_Markowitz
Ret_Markowitz
SD_Markowitz
Ret_Markowitz
Ret_Markowitz
mean.R
Wt_Markowitz
5.302024e-09
options(scipen = 999)
5.302024e-09
1.000000e+00
SD_Markowitz
plot_ly(ef, type = 'scatter', x = ~sigma.P, y = ~mu.P, mode = 'lines') %>%
layout(title = paste0("Strategy Return"),
xaxis = list(title = 'Sigma',range = c(0 , max(sigma.P) * 1.1)),
yaxis = list(title = 'Return',range = c(min(mean.R) * 0.5, max(mean.R) * 1.1)))
Ret_Data <- Portfolio_All$Equity_All
Ret_Data$index <- as.Date(Ret_Data$index)
Ret_xts <- as.xts.data.table(Ret_Data)
Ret_xts <- Ret_xts[,-1]
Ret_ts <- as.timeSeries(Ret_xts)
EffFrontier <- portfolioFrontier(Ret_ts, constraints = "LongOnly")
EffFrontier@portfolio@portfolio$covRiskBudgets
EffFrontier@portfolio@portfolio$weights
EffFrontier@portfolio@portfolio$minriskPortfolio
EffFrontier@portfolio@portfolio$targetAlpha
EffFrontier@portfolio@portfolio$targetRisk
tgPortfolio <- tangencyPortfolio(Ret_ts,  constraints = "LongOnly")
tgPortfolio
tgAssets <- frontierPoints(tgPortfolio, auto = FALSE)
tgAssets
index = 1:NROW(ef)
test = c(-1, diff(ef[, 1]))
index = index[test > 0]
ans = ans[index, ]
ans <- ef
index = 1:NROW(ans)
test = c(-1, diff(ans[, 1]))
index = index[test > 0]
ans = ans[index, ]
ans
test
diff(ans[, 1])
ans[1]
ans
ans <- ef
ans
ans[1]
ans[,1]
diff(ans[,1])
ans <- as.data.frame(ef)
index = 1:NROW(ans)
test = c(-1, diff(ans[,1]))
index = index[test > 0]
ans = ans[index, ]
ans
test
diff(ans[,1])
View(diff(ans[,1]))
View(ans)
sigma.P <- mu.P
for (i in 1:length(mu.P)) {
# i <- 1
bvec = c(1, mu.P[i])  ## constraint vector
result = solve.QP(Dmat = as.matrix(cov.R),
dvec = rep(0, length(mean.R)),
Amat = Amat,
bvec = bvec, meq = 2)
sigma.P[i] = sqrt(result$value)
}
View(sigma.P)
0.010043040 - 0.010057678
ans <- as.data.frame(ef)
View(ans)
index = 1:NROW(ans)
test = c(-1, diff(ans[,1]))
View(test)
index = index[test > 0]
ans = ans[index, ]
ans
index
plot_ly(x = Portfolio_EFrontier$targetRisk$Cov, y = Portfolio_EFrontier$targetReturn$mu, mode = "lines", name = "Efficient Frontier", type = "scatter") %>%
add_trace(x = Portfolio_EFrontier$Sigma$MACD, y = Portfolio_EFrontier$Mu$MACD, mode = "markers", name = "MACD", type = "scatter",
hoverinfo = 'text', text = ~paste('MACD : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$MACD, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$MACD)) %>%
add_trace(x = Portfolio_EFrontier$Sigma$RSI, y = Portfolio_EFrontier$Mu$RSI, mode = "markers", name = "RSI", type = "scatter",
hoverinfo = 'text', text = ~paste('RSI : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$RSI, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$RSI)) %>%
add_trace(x = Portfolio_EFrontier$Sigma$MA, y = Portfolio_EFrontier$Mu$MA, mode = "markers", name = "MA", type = "scatter",
hoverinfo = 'text', text = ~paste('MA : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$MA, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$MA)) %>%
add_trace( x = Portfolio_EFrontier$Sigma$BB, y = Portfolio_EFrontier$Mu$BB, mode = "markers", name = "BB", type = "scatter",
hoverinfo = 'text', text = ~paste('BB : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$BB, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$BB)) %>%
add_trace(x = Portfolio_EFrontier$Sigma$Dist, y = Portfolio_EFrontier$Mu$Dist, mode = "markers", name = "Dist", type = "scatter",
hoverinfo = 'text', text = ~paste('Dist : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$Dist, '<br /> Sigma: ', Portfolio_EFrontier$Sigma$Dist)) %>%
add_trace(x = Portfolio_EFrontier$Risk[[2]], y = Portfolio_EFrontier$Return[[2]], mode = "markers", name = "MinSigma", type = "scatter",
hoverinfo = 'text', text = ~paste('Min Sigma : ', '<br /> Mean: ', Portfolio_EFrontier$Return[[2]], '<br /> Sigma: ', Portfolio_EFrontier$Risk[[2]])) %>%
add_trace(x = Portfolio_EFrontier$tgRisk, y = Portfolio_EFrontier$tgReturn, mode = "markers", name = "Portfolio", type = "scatter",
hoverinfo = 'text', text = ~paste('Portfolio : ', '<br /> Mean: ', Portfolio_EFrontier$Mu$Dist, '<br /> Sigma: ', Portfolio_EFrontier$tgRisk)) %>%
layout(title = "Efficient Frontier", xaxis = list(title = "Sigma"), yaxis = list(title = "Mean"))
frontier <- "both"
if (frontier == "upper") {
index = 1:length(ans[, 1])
test = c(-1, diff(ans[, 1]))
index = index[test > 0]
ans = ans[index, ]
} else if (frontier == "lower") {
index = 1:length(ans[, 1])
test = c(-1, diff(ans[, 1]))
index = index[test < 0]
if (length(index) == 1) {
ans = matrix(ans[index, ], ncol = 2)
} else {
ans = ans[index, ]
}
}
ans
frontier == "upper"
frontier == "lower"
tgAssets <- frontierPoints(tgPortfolio,frontier = "both" auto = FALSE)
tgAssets <- frontierPoints(tgPortfolio,frontier = "both", auto = FALSE)
tgAssets
tgAssets <- frontierPoints(tgPortfolio,frontier = "upper", auto = FALSE)
tgAssets
tgAssets <- frontierPoints(tgPortfolio,frontier = "upper", auto = FALSE)
tgAssets <- frontierPoints(tgPortfolio,frontier = "lower", auto = FALSE)
tgAssets
ans <- as.data.frame(ef)
index = 1:length(ans[, 1])
test = c(-1, diff(ans[, 1]))
index = index[test < 0]
index
View(Portfolio_All$Equity_All)
Ret_Data <- Portfolio_All$Equity_All
Ret_Data$index <- as.Date(Ret_Data$index)
colnames(Ret_Data)[-1]
Ret_xts <- as.xts.data.table(Ret_Data)
Select_mu <- base::colMeans(Ret_xts[,-1])
Select_mu
Select_COV_MT <- stats::cov(Ret_xts[,-1])
## Weight
Wt_Markowitz <- Fun_Markowitz(Select_mu, Select_COV_MT, 2)
Wt_Markowitz
Wt_Markowitz_DT <- cbind(Wt_Markowitz, colnames(Ret_xts))
Wt_Markowitz
colnames(Ret_xts)
colnames(Ret_xts)[-1]
colnames(Ret_Data)[-1]
##### ........... =====
##### tabPanel 3 =====
##### ........... =====
##### TradingPortfolio =====
## Markowitz_Portfolio
RL_Period <- get_RL_Period(Portfolio_All$Equity_All, periodn =  input$period)
